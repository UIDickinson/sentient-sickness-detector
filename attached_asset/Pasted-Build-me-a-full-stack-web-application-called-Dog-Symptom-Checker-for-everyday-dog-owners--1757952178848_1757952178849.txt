Build me a full-stack web application called **Dog Symptom Checker** for everyday dog owners.  

### Core Functionalities
1. **Data Cleaning & Model Training**
   - A Python script to clean a dataset of dog diseases and symptoms, normalize names, and generate a symptom vocabulary.
   - A Jupyter Notebook that trains a simple baseline machine learning model (e.g., scikit-learn) mapping symptoms → possible diseases.
   - Save the trained model (e.g., joblib) so the backend can load it.

2. **Backend (FastAPI + AI Integration)**
   - Provide a `/api/diagnose` endpoint where the user submits a list of symptoms as JSON.
   - Run the ML model to get predictions (diseases, probabilities, and suggested actions).
   - Pass these predictions into a **chat-like AI layer** that reformulates results in friendly, empathetic language that a regular dog owner can understand.
     - Example: Instead of returning `{disease: Parvovirus, probability: 0.68}`, return:  
       *“Based on your dog’s symptoms (fever, loss of appetite, vomiting), the most likely issue is Parvovirus, which requires urgent vet attention. Please see a vet as soon as possible.”*
   - Return both:
     - `chat_response` (conversational AI message)  
     - `raw_predictions` (structured list for advanced users or vet mode).

3. **Frontend (React)**
   - A clean, beginner-friendly UI where dog owners can:
     - Enter symptoms (autocomplete/typeahead recommended).
     - See their selected symptoms listed.
     - Click “Diagnose” to get results.
   - Display output in **chat-bubble style** so it feels conversational.
   - Show an optional “View Details” toggle with the raw prediction list (probabilities + actions).
   - Allow follow-up input so users can ask things like:  
     *“What should I do while waiting for the vet?”*

4. **Deployment**
   - Add Docker support for backend + frontend.
   - Provide a `docker-compose.yml` so the app runs in one command.
   - Allow running locally without Docker (`uvicorn fastapi_app:app` + `npm run dev`).

5. **Documentation**
   - Main README with setup, run instructions, and example usage.
   - Short system design doc explaining architecture and how AI is integrated.
   - API reference showing sample requests/responses for `/api/diagnose`.

### Expectations
- Code must be runnable end-to-end.
- Chat-like responses must be **grounded in the model output** (no hallucination of random diseases).
- Use plain English, empathetic tone, and helpful suggestions in the AI responses.
- Organize the repo cleanly into backend, frontend, infra, data, and docs folders.

Now, generate all files and code for this project.
